{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","conn","useState","useEffect","WebSocket","onclose","evt","console","log","onopen","onmessage","Flex","flexDirection","width","justifyContent","px","backgroundColor","paddingTop","paddingBottom","Avatar","name","Button","flex","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","ThemeProvider","theme","CSSReset","document","getElementById"],"mappings":"oPAmJeA,MA3Df,WACI,IAAIC,EADO,EAEeC,mBAAS,IAFxB,mBAsCX,OAtCW,UAIXC,qBAAU,YACNF,EAAO,IAAIG,UAAU,2BAChBC,QAAU,SAASC,GACpBC,QAAQC,IAAIF,IAEhBL,EAAKQ,OAAS,SAASH,GACnBC,QAAQC,IAAIF,IAEhBL,EAAKS,UAAY,SAASJ,GACtBC,QAAQC,IAAIF,OA0BlB,eAACK,EAAA,EAAD,CAAMC,cAAc,SAASC,MAAM,OAAnC,UACE,eAACF,EAAA,EAAD,CAAMG,eAAe,gBAAgBD,MAAM,OAAOE,GAAG,OAAOC,gBAAgB,UAAUC,WAAW,OAAOC,cAAc,OAAtH,UACE,cAACC,EAAA,EAAD,CAAQC,KAAK,WACb,cAACC,EAAA,EAAD,wBAEF,eAACV,EAAA,EAAD,CAAME,MAAM,OAAZ,UACE,cAACF,EAAA,EAAD,CAAMW,KAAK,IAAIN,gBAAgB,UAAUO,OAAO,SAIhD,cAACZ,EAAA,EAAD,CAAMW,KAAK,IAAIC,OAAO,gBC3HjBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wBCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAACC,EAAA,EAAD,CAAeC,MAAOA,IAAtB,UACE,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,SAGJC,SAASC,eAAe,SAM1BhB,M","file":"static/js/main.b2c4a913.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {Flex, Avatar, Button} from '@chakra-ui/core';\nimport './App.css';\n\nconst callAPI = (url: string, options: any): Promise<any> => {\n  return new Promise(async (resolve, reject) => {\n    fetch(url, options)\n      .then(async (response) => {\n        const text = await response.text()\n        if (!response.ok) {\n          reject(JSON.parse(text));\n        }\n        return text;\n      })\n      .then(response => resolve(JSON.parse(response)))\n      .catch(error => reject(error));\n  });\n}\n\ninterface Error {\n    Code: string\n    Message: string\n}\n\ninterface MessageResponse {\n    rid: string\n    uid: string\n    type: string\n    message: string\n    error: Error\n}\n\ninterface MessageRequest {\n    rid: string\n    uid: string\n    type: string\n    message: string\n}\n\ninterface Message {\n   id: string\n   rid: string\n   uid: string\n   created: string\n   message: string\n}\n\ninterface Room {\n  id: string\n  name: string\n}\n\n\ninterface RoomListProps {\n  messages: Message[]\n}\n\nfunction RoomList({ messages=[] }: RoomListProps) {\n  return(\n    <span>room list</span>\n  )\n}\n\nfunction Room() {\n  \n  return(\n  <>\n    <span>room</span>\n  </>\n  ) \n}\n\nfunction Rooms() {\n\n}\n\nfunction NewRoom() {\n\n}\n\nfunction SendMessage() {\n\n}\n\nfunction LoginModal() {\n\n}\n\nfunction App() {\n    let conn: WebSocket\n    const [rooms, SetRooms] = useState([])\n\n    useEffect(() => {\n        conn = new WebSocket(\"ws://127.0.0.1:8080/ws\");\n        conn.onclose = function(evt) {\n            console.log(evt)\n        };\n        conn.onopen = function(evt) {\n            console.log(evt)\n        };\n        conn.onmessage = function(evt) {\n            console.log(evt)\n        };\n    })\n\n\n    const sendMessage = (msg: string = \"\") => {\n        const message: MessageRequest = {\n            rid: \"general\",\n            uid: \"1\",\n            type: \"message\",\n            message: msg,\n        }\n        conn.send(JSON.stringify(message))\n    }\n    const sendCommand = (cmd: string = \"\") => {\n        const message: MessageRequest = {\n            rid: \"general\",\n            uid: \"1\",\n            type: \"command\",\n            message: \"stock=\" + cmd,\n        }\n        conn.send(JSON.stringify(message))\n    }\n\n\n    return (\n      <Flex flexDirection=\"column\" width=\"100%\">\n        <Flex justifyContent=\"space-between\" width=\"100%\" px=\"2rem\" backgroundColor=\"#34495e\" paddingTop=\"1rem\" paddingBottom=\"1rem\">\n          <Avatar name=\"Carlos\" />\n          <Button>Logout</Button>\n        </Flex>\n        <Flex width=\"100%\" >\n          <Flex flex=\"3\" backgroundColor=\"#ecf0f1\" height=\"90vh\">\n            \n          </Flex>\n          \n          <Flex flex=\"7\" height=\"100%\">\n\n          </Flex>\n\n        </Flex>\n\n      </Flex>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider, CSSReset, theme } from '@chakra-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CSSReset />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}