{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["callAPI","url","options","Promise","resolve","reject","a","fetch","then","response","text","ok","JSON","parse","catch","error","App","ws","React","useRef","useState","rooms","SetRooms","messages","SetMessages","profiles","SetProfiles","err","setErr","name","token","session","setSession","currentRoom","SetCurrenRoom","roomVal","setRoomVal","msgVal","setMsgVal","userVal","setUserVal","passVal","setPassVal","useDisclosure","isOpen","onOpen","onClose","useEffect","s","localStorage","getItem","current","WebSocket","onclose","evt","console","log","onopen","close","onmessage","data","rid","msg","id","uid","message","created","prev","header","method","headers","Retrieve","getMyID","val","find","p","getProfile","send","startsWith","cmd","type","substring","stringify","sendCommand","sendMessage","Flex","flexDirection","width","justifyContent","px","backgroundColor","paddingTop","paddingBottom","Avatar","Text","fontSize","color","Button","onClick","removeItem","flex","height","margin","Input","placeholder","value","onChange","e","target","body","resp","Create","map","r","Stack","cursor","isInline","maxHeight","overflowY","m","my","alignItems","size","moment","format","marginLeft","onKeyPress","event","charCode","Modal","closeOnEsc","closeOnOverlayClick","username","password","access_token","setItem","Login","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","ThemeProvider","theme","CSSReset","document","getElementById"],"mappings":"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","file":"static/js/main.0e641544.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {Flex, Avatar, Button, Input, Stack, Text, useDisclosure, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody} from '@chakra-ui/core';\nimport './App.css';\nimport moment from 'moment'\n\nconst callAPI = (url: string, options: any) : Promise<any> => {\n  return new Promise(async (resolve, reject) => {\n    fetch(url, options)\n      .then(async (response) => {\n        const text = await response.text()\n        if (!response.ok) {\n          reject(JSON.parse(text));\n        }\n        return text;\n      })\n      .then(response => resolve(JSON.parse(response)))\n      .catch(error => reject(error));\n  });\n}\n\ninterface Error {\n    code: string\n    message: string\n}\n\ninterface MessageResponse {\n    rid: string\n    uid: string\n    type: string\n    message: string\n    error: Error\n    id: string\n    created: string\n}\n\ninterface MessageRequest {\n    rid: string\n    uid: string\n    type: string\n    message: string\n}\n\ninterface Message {\n   id: string\n   rid: string\n   uid: string\n   created: string\n   message: string\n}\n\ninterface Profile {\n  id: string\n  name: string\n}\n\ninterface Room {\n  id: string\n  name: string\n}\n\n\ninterface RoomListProps {\n  messages: Message[]\n}\n\nfunction RoomList({ messages=[] }: RoomListProps) {\n  return(\n    <span>room list</span>\n  )\n}\n\nfunction Room() {\n  \n  return(\n  <>\n    <span>room</span>\n  </>\n  ) \n}\n\nfunction Rooms() {\n\n}\n\nfunction NewRoom() {\n\n}\n\nfunction SendMessage() {\n\n}\n\nfunction LoginModal() {\n\n}\n\n\ninterface Session {\n  name: string\n  token: string\n}\n\n\nfunction App() {\n    const ws = React.useRef<WebSocket>(null)\n    const [rooms, SetRooms] = useState<Room[]>([])\n    const [messages, SetMessages] = useState<Message[]>([])\n    const [profiles, SetProfiles] = useState<Profile[]>([])\n\n    const [err, setErr] = useState<string>(\"\")\n    const [session, setSession] = useState<Session>({name: \"\", token: \"\"})\n    const [currentRoom, SetCurrenRoom] = useState<string>(\"general\")\n    \n    const [roomVal, setRoomVal] = React.useState(\"\");\n    const handleRoomValChange = (e: any) => setRoomVal(e.target.value);\n    \n    const [msgVal, setMsgVal] = React.useState(\"\");\n    const handleMsgValChange = (e: any) => setMsgVal(e.target.value);\n\n    const [userVal, setUserVal] = React.useState(\"\");\n    const handleUserValChange = (e: any) => setUserVal(e.target.value);\n    const [passVal, setPassVal] = React.useState(\"\");\n    const handlePassValChange = (e: any) => setPassVal(e.target.value);\n\n    const { isOpen, onOpen, onClose } = useDisclosure(true);\n    \n    useEffect(() => {\n      const s = localStorage.getItem(\"session\")\n      if (s === null) return\n      const session = JSON.parse(s) as Session\n      setSession(session)\n      onClose()\n    }, [])\n\n    useEffect(() => {\n        // @ts-ignore\n        ws.current = new WebSocket(\"ws://127.0.0.1:8080/ws\")\n        ws.current.onclose = function(evt) {console.log(evt)};\n        ws.current.onopen = function(evt) {console.log(evt)};\n        return () => {\n          // @ts-ignore\n          ws.current.close();\n        };\n    }, [])\n\n    useEffect(() => {\n      if (!ws.current) return;\n      ws.current.onmessage = function(evt) {\n        const response = JSON.parse(evt.data) as MessageResponse\n        if (response.rid === currentRoom && response.error === null) {\n          const msg = {\n            id: response.id,\n            rid: response.rid,\n            uid: response.uid,\n            message: response.message,\n            created: response.created,\n          }\n          SetMessages(prev => [...prev, msg])\n        } else if (response.error !== null) {\n          const msg = {\n            id: response.id,\n            rid: response.rid,\n            uid: response.uid,\n            message: response.error.message,\n            created: response.created,\n          }\n          SetMessages(prev => [...prev, msg])\n        } \n    };\n    }, [currentRoom])\n\n    useEffect( () => {\n      async function Retrieve() {\n        const header = {\n          method: \"GET\",\n          headers: {\n            'Authorization': `Bearer ${session.token}`, \n          },    \n        };\n        const rooms = await callAPI(\"http://127.0.0.1:8080/rooms\", header)\n        SetRooms(rooms)\n      }\n\n      Retrieve()\n    }, [session])\n\n    useEffect( () => {\n      async function Retrieve() {\n        const header = {\n          method: \"GET\",\n          headers: {\n            'Authorization': `Bearer ${session.token}`, \n          },    \n        };\n        const profiles = await callAPI(\"http://127.0.0.1:8080/profiles\", header)\n        SetProfiles(profiles)\n      }\n\n      Retrieve()\n    }, [session])\n\n    useEffect(() => {\n      async function Retrieve() {\n        const header = {\n          method: \"GET\",\n          headers: {\n            'Authorization': `Bearer ${session.token}`, \n          },    \n        };\n        const messages = await callAPI(`http://127.0.0.1:8080/messages/${currentRoom}`, header)\n        SetMessages(messages)\n      }\n      Retrieve()\n    }, [currentRoom, session])\n\n    const createRoom = () => {\n      async function Create() {        \n        const body = {\n          name: roomVal\n        };\n\n        const header = {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session.token}`, \n          },\n          body: JSON.stringify(body),\n          };\n          const resp = await callAPI(`http://127.0.0.1:8080/rooms`, header)\n          SetRooms(prev => [...prev, resp])\n        }\n        Create()\n    }\n\n    const login = () => {\n      async function Login() {        \n        const body = {\n          username: userVal,\n          password: passVal\n        };\n\n        const header = {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(body),\n          };\n          try {\n            const resp = await callAPI(`http://127.0.0.1:8080/login`, header)\n            const s = {name: userVal, token: resp.access_token}\n            setSession(s)\n            setErr(\"\")\n            localStorage.setItem(\"session\", JSON.stringify(s))\n            onClose()\n            setPassVal(\"\")\n            setUserVal(\"\")           \n          } catch(err) {\n            setErr(err.message)\n          }\n        }\n        Login()\n    }\n\n    const getMyID = (): string => {\n      const val = profiles.find((p) => p.name === session.name)\n      return val?.id || \"\"\n    }\n\n    const getProfile = (id: string) : Profile => {\n      if (id === \"bot\") return {id: \"bot\", name: \"BOT\"}\n      const p = profiles.find((p) => p.id === id)\n      return p || {name: \"\", id: \"\"}\n    }\n\n\n    const sendMessage = (msg: string = \"\") => {\n        const message: MessageRequest = {\n            rid: currentRoom,\n            uid: getMyID(),\n            type: \"message\",\n            message: msg,\n        }\n        // @ts-ignore\n        ws.current.send(JSON.stringify(message))\n    }\n    \n    const sendCommand = (cmd: string = \"\") => {\n        const message: MessageRequest = {\n            rid: currentRoom,\n            uid: getMyID(),\n            type: \"command\",\n            message: cmd.substring(1),\n        }\n        // @ts-ignore\n        ws.current.send(JSON.stringify(message))\n    }\n\n    const send = (): void =>  {\n      const msg = msgVal;\n      if (msg === \"\") return\n      if (msg.startsWith(\"/stock\")) {\n        sendCommand(msg)\n      } else {\n        sendMessage(msg)\n      }\n      setMsgVal(\"\")\n    }\n    const onKeyUp = (event: any) => {\n      if (event.charCode === 13) {\n        send()\n      }\n    }\n\n    const logout = () => {\n      localStorage.removeItem(\"session\")\n      setSession({name: \"\", token: \"\"})\n      onOpen()\n    }\n\n    return (\n      <Flex flexDirection=\"column\" width=\"100%\">\n        <Flex justifyContent=\"space-between\" width=\"100%\" px=\"2rem\" backgroundColor=\"#34495e\" paddingTop=\"1rem\" paddingBottom=\"1rem\">\n          <Avatar name={session.name} />\n          <Text fontSize=\"2rem\" color=\"#FFF\">{currentRoom}</Text>\n          <Button onClick={logout}>Logout</Button>\n        </Flex>\n        <Flex width=\"100%\" >\n          <Flex flex=\"3\" backgroundColor=\"#ecf0f1\" height=\"90vh\" flexDirection=\"column\">\n            <Flex margin=\".5rem\" justifyContent=\"center\">\n              <Input placeholder=\"New Room\" value={roomVal} onChange={handleRoomValChange}/>\n              <Button onClick={createRoom}>Create</Button>\n            </Flex>\n            {\n              rooms.map((r) => (\n                <Stack cursor=\"pointer\" key={r.id} isInline backgroundColor=\"#2980b9\" margin=\"0.2rem\" onClick={() => SetCurrenRoom(r.name)}>\n                  <Text>{r.name}</Text>\n                </Stack>\n              ))\n            }\n          </Flex>\n          \n          <Flex flex=\"7\" height=\"100%\" flexDirection=\"column\" px=\"1rem\" >\n            <Flex flexDirection=\"column\" height=\"85vh\" maxHeight=\"85vh\" overflowY=\"scroll\">\n              {\n                messages.map((m) => (\n                  <Flex key={m.id} flexDirection=\"column\" my=\"0.3rem\">\n                    <Stack isInline alignItems=\"center\">\n                      <Avatar size=\"md\" name={getProfile(m.uid).name} />\n                      <Flex flexDirection=\"column\">\n                        <Text fontSize=\".8rem\">{moment(m.created).format(\"YYYY-MM-DD HH:mm:ss\")}</Text>\n                        <Text fontSize=\".8rem\">{getProfile(m.uid).name}</Text>\n                      </Flex>\n                    </Stack>\n                    <Flex marginLeft=\"3rem\" my=\"0.5rem\">\n                    <Text>{m.message}</Text>\n                    </Flex>\n                  </Flex>\n                ))\n              }\n            </Flex>\n            <Flex>\n              <Stack isInline width=\"100%\">\n                <Input placeholder=\"\" value={msgVal} onChange={handleMsgValChange} onKeyPress={onKeyUp}/>\n                <Button onClick={send}>Send</Button>\n              </Stack>\n            </Flex>\n\n          </Flex>\n\n        </Flex>\n        <Modal isOpen={isOpen} onClose={onClose} closeOnEsc={false} closeOnOverlayClick={false}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Login</ModalHeader>\n          <ModalBody>\n              <Stack width=\"100%\">\n                <Input placeholder=\"username\" value={userVal} onChange={handleUserValChange}/>\n                <Input placeholder=\"password\" type=\"password\" value={passVal} onChange={handlePassValChange}/>\n                <Button onClick={login}>Login</Button>\n                {\n                  err !== \"\" && <Text>Error: {err}</Text>\n                }\n              </Stack>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n      </Flex>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider, CSSReset, theme } from '@chakra-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CSSReset />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}